/* automatically generated by rust-bindgen 0.71.1 */

#[doc = "The Dark Mod GPL Source Code\n\nThis file is part of the The Dark Mod Source Code, originally based\non the Doom 3 GPL Source Code as published in 2011.\n\nThe Dark Mod Source Code is free software: you can redistribute it\nand/or modify it under the terms of the GNU General Public License as\npublished by the Free Software Foundation, either version 3 of the License,\nor (at your option) any later version. For details, see LICENSE.TXT.\n\nProject: The Dark Mod (http://www.thedarkmod.com/)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idClass {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of idClass"][::std::mem::size_of::<idClass>() - 1usize];
    ["Alignment of idClass"][::std::mem::align_of::<idClass>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idEntity {
    pub entityNumber: ::std::os::raw::c_int,
}
pub const idEntity_MAX_PVS_AREAS: ::std::os::raw::c_int = 4;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of idEntity"][::std::mem::size_of::<idEntity>() - 4usize];
    ["Alignment of idEntity"][::std::mem::align_of::<idEntity>() - 4usize];
    ["Offset of field: idEntity::entityNumber"]
        [::std::mem::offset_of!(idEntity, entityNumber) - 0usize];
};
#[doc = "The Dark Mod GPL Source Code\n\nThis file is part of the The Dark Mod Source Code, originally based\non the Doom 3 GPL Source Code as published in 2011.\n\nThe Dark Mod Source Code is free software: you can redistribute it\nand/or modify it under the terms of the GNU General Public License as\npublished by the Free Software Foundation, either version 3 of the License,\nor (at your option) any later version. For details, see LICENSE.TXT.\n\nProject: The Dark Mod (http://www.thedarkmod.com/)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idVec2 {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of idVec2"][::std::mem::size_of::<idVec2>() - 8usize];
    ["Alignment of idVec2"][::std::mem::align_of::<idVec2>() - 4usize];
    ["Offset of field: idVec2::x"][::std::mem::offset_of!(idVec2, x) - 0usize];
    ["Offset of field: idVec2::y"][::std::mem::offset_of!(idVec2, y) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idVec3 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of idVec3"][::std::mem::size_of::<idVec3>() - 12usize];
    ["Alignment of idVec3"][::std::mem::align_of::<idVec3>() - 4usize];
    ["Offset of field: idVec3::x"][::std::mem::offset_of!(idVec3, x) - 0usize];
    ["Offset of field: idVec3::y"][::std::mem::offset_of!(idVec3, y) - 4usize];
    ["Offset of field: idVec3::z"][::std::mem::offset_of!(idVec3, z) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idThread {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of idThread"][::std::mem::size_of::<idThread>() - 1usize];
    ["Alignment of idThread"][::std::mem::align_of::<idThread>() - 1usize];
};
unsafe extern "C" {
    #[link_name = "\u{1}_ZN8idThread12ReturnStringEPKc"]
    pub fn idThread_ReturnString(text: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN8idThread11ReturnFloatEf"]
    pub fn idThread_ReturnFloat(value: f32);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN8idThread9ReturnIntEi"]
    pub fn idThread_ReturnInt(value: ::std::os::raw::c_int);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN8idThread12ReturnVectorERK6idVec3"]
    pub fn idThread_ReturnVector(vec: *const idVec3);
}
unsafe extern "C" {
    #[link_name = "\u{1}_ZN8idThread12ReturnEntityEP8idEntity"]
    pub fn idThread_ReturnEntity(ent: *mut idEntity);
}
impl idThread {
    #[inline]
    pub unsafe fn ReturnString(text: *const ::std::os::raw::c_char) {
        idThread_ReturnString(text)
    }
    #[inline]
    pub unsafe fn ReturnFloat(value: f32) {
        idThread_ReturnFloat(value)
    }
    #[inline]
    pub unsafe fn ReturnInt(value: ::std::os::raw::c_int) {
        idThread_ReturnInt(value)
    }
    #[inline]
    pub unsafe fn ReturnVector(vec: *const idVec3) {
        idThread_ReturnVector(vec)
    }
    #[inline]
    pub unsafe fn ReturnEntity(ent: *mut idEntity) {
        idThread_ReturnEntity(ent)
    }
}
